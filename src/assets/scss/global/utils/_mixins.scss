@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root("::-webkit-input-placeholder") {
    @content;
  }

  @include optional-at-root(":-moz-placeholder") {
    @content;
  }

  @include optional-at-root("::-moz-placeholder") {
    @content;
  }

  @include optional-at-root(":-ms-input-placeholder") {
    @content;
  }
}

@mixin hover($parent: null, $touch: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");
  $touchMod: null;

  @if (not $touch) {
    $touchMod: "html:not(.touch)";
  }

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
         @content;
      }
    }
  } @else if ($parent) {
    #{$touchMod} #{$parent}:hover & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    #{$touchMod} &:hover {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }
  } @else { //not $parent and not $isPseudo
    #{$touchMod} &:hover {
      @content;
    }
  }
}

@mixin active($parent: null, $class: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
        @debug $selector;

         @content;
      }
    }
  } @else if $parent {
    #{$parent}:active &,
    #{$parent}--active & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    &:active {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }

  } @else { //not $parent and not $isPseudo
    &:active,
    &--active
    {
      @content;
    }
  }
}

@mixin focus($parent: null, $onlyTouch: false) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");
  $isChecked: str-index($selectors, "> input:checked");
  $touchMod: null;

  @if ($onlyTouch) {
    $touchMod: "html.touch";
  }

  @if ($parent and $isChecked) {
    #{$touchMod} & {
      $selector: &;
      $splitSelector: str-split("#{$selector}", ">");
      $selector: str-replace(nth($splitSelector, 1), $parent, "#{$parent}:hover");
      $selector: "#{$selector} > #{nth($splitSelector, 2)}";

      @at-root #{$selector} {
        @debug $selector;

         @content;
      }
    }
  } @else if $parent {
    #{$touchMod} #{$parent}:focus & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: get-map-modified-pseudo-selectors("#{$selectors}");

    #{$touchMod} &:focus {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }
  } @else { //not $parent and not $isPseudo
    #{$touchMod} &:focus {
      @content;
    }
  }
}

@mixin u-grow-full-height() {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}


@mixin container {
  margin-right: auto;
  margin-left: auto;
  padding-right: $container-padding-x;
  padding-left: $container-padding-x;
  max-width: 1170px;
}

@mixin menu-hover {
  animation-name: menu-hover;
  animation-duration: 0.25s;
  animation-delay: 0.2s;
  animation-fill-mode: forwards;
}

@mixin header-sticky($bp) {
  .page-header--sticky & {
    @include media-breakpoint-up($bp) {
      @content;
    }
  }
}

@mixin mobile-open($bp: null) {
  .page--mobile-open & {
    @if ($bp) {
      @include media-breakpoint-up($bp) {
        @content;
      }
    } @else {
      @content;
    }
  }
}

@mixin caret($top, $right, $color: $gray-dark-color, $hoverColor: $black-color) {
  &::after {
    content: "";
    position: absolute;
    top: $top;
    right: $right;
    width: 4px;
    height: 4px;
    border: 1px solid $color;
    border-top-color: transparent;
    border-left-color: transparent;
    transform: rotate3d(0, 0, 1, 45deg);

    @include hover {
      border-bottom-color: $hoverColor;
      border-right-color: $hoverColor;
    }
  }
}

@mixin text-bg($color: $primary-color, $border-radius: $border-radius) {
  position: relative;
  padding-left: 0.55em;
  margin-right: 0.7em;
  display: inline-block;

  &::before {
    content: "";
    position: absolute;
    top: -0.35em;
    right: -0.55em;
    bottom: -0.35em;
    left: 0;
    z-index: -1;
    border-radius: $border-radius;
    background-color: $color;
  }
}

@mixin box($x: 0) {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 6px;
  background-color: $white-color;
  box-shadow: $x 14px 21px rgba($black-color, 0.1);

}
